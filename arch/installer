#!/bin/bash
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
exec 1> >(tee "stdout.log")
exec 2> >(tee "stderr.log")

pream='[install]==>'
REPO_URL="https://s3.amazonaws.com/sbp-arch/repo/"

# Partitioning function
function partitioner () {
    local pream='[partition]==>'
    #-----LUKS-----#

    # Get list of drives
    drivelist=$(lsblk --paths --list --noheadings --nodeps \
        --sort size --output name,size | grep -Ev "boot|rpmb|loop" | tac)

    # Ask for LUKS
    read -p "${pream} Do you want to set up LUKS for a drive? (y/n/Q): " choiceLuks

    # Format LUKS
    case "$choiceLuks" in
        y|Y)
            # Ask for the password
            lukspass=$(dialog --stdout --passwordbox \
                "Enter LUKS password" 0 0) || exit 1
            clear
            : ${lukspass:?"password cannot be empty"}
            lukspass2=$(dialog --stdout --passwordbox \
                "Enter LUKS password again" 0 0) || exit 1
            clear
            [[ "$lukspass" == "$lukspass2" ]] || \
                ( echo "Passwords did not match"; exit 1; )
        
            # Prompt for devices
            drive=$(dialog --stdout --menu "Select drive for LUKS" \
                0 0 0 ${drivelist}) || exit 1
            clear

            # Confirm
            if [ -d "/sys/firmware/efi" ]
            then
                echo "${pream} UEFI detected, will make GPT table!"
            else
                echo "${pream} BIOS detected, will make MSDOS table!"
            fi
            read -p "${pream} Format ${drive} as LUKS? (WILL WIPE DISK) (y/N): " \
                choiceConf
        
            case "$choiceConf" in 
                y|Y )
                    # Make new table depending on EFI
                    if [ -d "/sys/firmware/efi" ]
                    then
                        echo "${pream} Writing new gpt partition table."
                        parted --script "${drive}" -- mklabel gpt mkpart ESP fat32 1Mib 551MiB set 1 boot on mkpart primary ext4 551MiB 100%
                    else
                        echo "${pream} Writing new msdos partition table."
                        parted --script "${drive}" -- mklabel msdos mkpart primary fat32 1Mib 551MiB set 1 boot on mkpart primary ext4 551MiB 100%
                    fi
                    bootpart="$(ls ${drive}* | grep -E "^${drive}p?1$")"

                    # Set encrypted partition
                    lukspart="$(ls ${drive}* | grep -E "^${drive}p?2$")"
                    echo "${pream} opening LUKS container at ${lukspart}"
                    echo -n "$lukspass" | cryptsetup --key-size 512 --hash sha512 luksFormat "$lukspart" -
                    cryptsetup open "$lukspart" cryptolvm -

                    # Create logical volumes
                    echo "${pream} Creating LVM"
                    pvcreate /dev/mapper/cryptolvm
                    vgcreate Linux /dev/mapper/cryptolvm
                
                    # Create swap
                    read -p "${pream} Enter swap size in GiB, or 0 to cancel: " \
                        choiceSwap
                    case "$choiceSwap" in
                        0 ) echo "${pream} No swap partition will be created.";;
                        * )
                            echo "${pream} Creating swap with ${choiceSwap}G"
                            lvcreate -L "${choiceSwap}G" Linux -n Swap
                            swappart="/dev/mapper/Linux-Swap"
                            ;;
                    esac

                    # Create root
                    read -p "${pream} Enter root size in GiB, 0 to cancel, or 100% for full space: " \
                        choiceRoot
                    case "$choiceRoot" in
                        0 ) echo "${pream} No root partition will be created.";;
                        100% )
                            echo "${pream} Creating root in the remaining space"
                            lvcreate -l 100%FREE Linux -n Arch
                            rootpart="/dev/mapper/Linux-Arch"
                            ;;
                        * )
                            echo "${pream} Creating root with ${choiceRoot}G"
                            lvcreate -L "${choiceRoot}G" Linux -n Arch
                            rootpart="/dev/mapper/Linux-Arch"
                            ;;
                    esac

                    # Create home
                    read -p "${pream} Enter home size in (GiB), 0 to cancel, 100% for full space: " \
                        choiceHome
                    case "$choiceHome" in
                        0 ) echo "${pream} No home partition will be created.";;
                        100% )
                            echo "${pream} Creating Home in the remaining space"
                            lvcreate -l 100%FREE Linux -n Home
                            homepart="/dev/mapper/Linux-Home"
                            ;;
                        * )
                            echo "${pream} Creating Home with ${choiceHome}G"
                            lvcreate -L "${choiceHome}G" Linux -n Home
                            homepart="/dev/mapper/Linux-Home"
                            ;;
                    esac
                    ;;
                *) exit 1;;
            esac
            ;;
        n|N)
            echo "${pream} Not doing LUKS . . ." ;;
        *) exit 1;;
    esac

    #-----CHOOSING PARTITIONS-----#

    # Get partitions
    devicelist=$(lsblk --paths --list --noheadings \
        --sort size --output name,size | grep -Ev "boot|rpmb|loop" | tac)

    # Root partition
    if [[ -z ${rootpart+x} ]]
    then
        rootpart=$(dialog --stdout --menu "Select root partition" 0 0 0 ${devicelist}) || exit 1
    fi

    # Home partition
    if [[ -z ${homepart+x} ]]
    then
        homepart=$(dialog --stdout --menu "Select home partition" 0 0 0 ${devicelist}) || exit 1
    fi

    # Boot partition
    if [[ -z ${bootpart+x} ]]
    then
        bootpart=$(dialog --stdout --menu "Select boot partition" 0 0 0 ${devicelist}) || echo ""
    fi

    # SWAP partition
    if [[ -z ${swappart+x} ]]
    then
        swappart=$(dialog --stdout --menu "Select swap partition" 0 0 0 ${devicelist}) || echo ""
    fi
    clear

    # Double check

    # Root
    read -p "${pream} Is $rootpart as root partition correct? (y/N): " choice
    case "$choice" in 
        y|Y ) echo "${pream} Will format $rootpart as btrfs and as root filesystem.";;
        * ) exit 1;;
    esac

    # Home: if same as root, make it btrfs subvolume
    if [ "$homepart" == "$rootpart" ]
    then
        read -p "${pream} Is home as btrfs subvolume correct? (y/N): " choice
        case "$choice" in 
            y|Y ) echo "${pream} Will create @home as a subvolume";;
            * ) exit 1;;
        esac
    else
        read -p "${pream} Is ${homepart} as home partition correct? (y/N): " choice
        case "$choice" in 
            y|Y ) echo "${pream} Will format ${homepart} as xfs and mount at /home";;
            * ) exit 1;;
        esac
    fi

    # BOOT: if missing, assume non UEFI
    if [[ -z $bootpart ]]
    then
        read -p "${pream} Is no boot partition correct? (NEEDED FOR LUKS) (y/N): " choice
        case "$choice" in 
            y|Y ) echo "${pream} Will install in bios mode";;
            * ) exit 1;;
        esac
    else
        read -p "${pream} Is $bootpart as boot partition correct? (y/N): " choice
        case "$choice" in 
            y|Y ) echo "${pream} Will format $bootpart as fat32.";;
            * ) exit 1;;
        esac
    fi

    # Swap
    if [[ -z $swappart ]]
    then
        read -p "${pream} Is no swap correct? (y/N)" choice
        case "$choice" in 
            y|Y ) echo "${pream} Will not have a swap partition";;
            * ) exit 1;;
        esac
    else
        read -p "${pream} Is $swappart as swap correct? (y/N)" choice
        case "$choice" in 
            y|Y ) echo "${pream} Will format $swappart as swap";;
            * ) exit 1;;
        esac
    fi

    #-----FILESYSTEMS-----#

    # Swap
    if [[ -n $swappart ]]
    then
        echo "${pream} Making $swappart as swap, and turning on swap"
        mkswap -L Swap "${swappart}"
        swapon "${swappart}"
    fi

    # Root
    echo "${pream} Formatting ${rootpart} as btrfs"
    mkfs.btrfs -L Arch "${rootpart}"

    # Boot
    if [[ -n $bootpart ]]
    then
        echo "${pream} Formatting ${bootpart} as fat32"
        mkfs.fat -F 32 "${bootpart}"
        fatlabel "${bootpart}" ESP
    fi

    # Home
    if [ "$homepart" != "$rootpart" ]
    then
        echo "${pream} Formatting ${homepart} as xfs"
        mkfs.xfs -L  Home "${homepart}"
    fi

    # Create root subvolumes now
    echo "${pream} Mounting ${rootpart} at /mnt"
    mount ${rootpart} /mnt
    echo "${pream} Creating subvolumes @root and @snapshots at /mnt"
    btrfs subvolume create /mnt/@root
    btrfs subvolume create /mnt/@snapshots
    if [ "$homepart" == "$rootpart" ]
    then
        echo "${pream} Creating subvolume @home at /mnt"
        btrfs subvolume create /mnt/@home
    fi

    echo "${pream} Unmounting /mnt, and mounting @root at /mnt"
    umount /mnt
    mount -o rw,nodiscard,noatime,nodiratime,compress=lzo,space_cache,subvol=@root "${rootpart}" /mnt
    echo "${pream} Creating directories under /mnt"
    mkdir -p /mnt/{boot,home,.snapshots,var/lib,var/cache/pacman}
    echo "${pream} Mounting @snapshots at /mnt/.snapshots"
    mount -o rw,nodiscard,noatime,nodiratime,compress=lzo,space_cache,subvol=@snapshots "${rootpart}" /mnt/.snapshots
    echo "${pream} Creating nested subvolumes under /mnt"
    btrfs subvolume create /mnt/var/abs
    btrfs subvolume create /mnt/var/cache/pacman/pkg
    btrfs subvolume create /mnt/var/lib/machines
    btrfs subvolume create /mnt/var/tmp
    btrfs subvolume create /mnt/var/log
    btrfs subvolume create /mnt/opt

    # Mount the efi partition if it is defined, and do bind mount
    if [[ -n $bootpart ]]
    then
        if [ -d "/sys/firmware/efi" ]
        then
            echo "${pream} UEFI boot mode detected."
            echo "${pream} Mounting ${bootpart} at /mnt/efi"
            echo "${pream} Binding /mnt/efi/EFI/Arch to /mnt/boot"
            mkdir /mnt/efi
            mount "${bootpart}" /mnt/efi
            mkdir -p /mnt/efi/EFI/Arch
            mount --bind /mnt/efi/EFI/Arch /mnt/boot
        else
            echo "${pream} BIOS boot mode detected."
            echo "${pream} Mounting ${bootpart} at /mnt/boot"
            mount "${bootpart}" /mnt/boot
        fi
    fi

    # Mount subvolume or partition at home
    if [ "$homepart" == "$rootpart" ]
    then
        echo "${pream} Mounting @home at /mnt/home"
        mount -o rw,nodiscard,noatime,nodiratime,compress=lzo,space_cache,subvol=@home "${rootpart}" /mnt/home
    else
        echo "${pream} Mounting ${homepart} at /mnt/home"
        mount "${homepart}" /mnt/home
    fi

    echo "${pream} Partitioning complete; check lsblk and btrfs subvolume list /mnt"
}


# Partition the drive now
echo "Auto-partitioner will create LUKS partition, and EFI if UEFI."
echo "On top of this, it will create partitions for root, home and swap."
echo "If you want a custom map; quit, mount at /mnt, and continue."
read -p "${pream} Do you want to use auto partitioning? (y/n/Quit): " choice
case "$choice" in
    y|Y ) partitioner;;
    n|N ) echo "";;
    * ) exit 1;;
esac

# Get hostname
hostname=$(dialog --stdout --inputbox "Enter hostname" 0 0) || exit 1
clear
: ${hostname:?"hostname cannot be empty"}
# Get password
password=$(dialog --stdout --passwordbox "Enter admin password" 0 0) || exit 1
clear
: ${password:?"password cannot be empty"}
password2=$(dialog --stdout --passwordbox "Enter admin password again" 0 0) || exit 1
clear
[[ "$password" == "$password2" ]] || ( echo "Passwords did not match"; exit 1; )

# Sync time
echo "${pream} Synching time"
timedatectl set-ntp true

# Install the base package
echo "${pream} Copying repo url to pacman config"
cat >>/etc/pacman.conf <<EOF
[multilib]
Include = /etc/pacman.d/mirrorlist
[sbp]
SigLevel = Optional TrustAll
Server = $REPO_URL
EOF

echo "${pream} Refreshing mirrors"
pacman -Sy
pacman --noconfirm -S reflector
reflector --verbose --latest 200 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist
pacman -Sy

echo "${pream} Installing base package"
pacstrap /mnt sbp-base
genfstab -U /mnt >> /mnt/etc/fstab
echo "${hostname}" > /mnt/etc/hostname

echo "${pream} Adding self repo"
cat >>/mnt/etc/pacman.conf <<EOF
[multilib]
Include = /etc/pacman.d/mirrorlist
[sbp]
SigLevel = Optional TrustAll
Server = $REPO_URL
EOF

echo "${pream} Change root shell to zsh"
arch-chroot /mnt chsh -s /usr/bin/zsh
# Add admin password to user and root
echo "${pream} Setting passwords"
echo "sbp:$password" | chpasswd --root /mnt
echo "root:$password" | chpasswd --root /mnt
