#-------------------#
#-----I3 Config-----#
#-------------------#

# This is my i3 config

## Base16 Classic Dark
# Author: Jason Heeris (http://heeris.id.au)
#
# You can use these variables anywhere in the i3 configuration file.

#----------------#
#-----I3 Bar-----#
#----------------#

font pango:monospace 11px

set $base00 #151515
set $base01 #202020
set $transp #202020AA
set $base02 #303030
set $base03 #505050
set $base04 #B0B0B0
set $base05 #D0D0D0
set $base06 #E0E0E0
set $base07 #F5F5F5
set $base08 #AC4142
set $base09 #D28445
set $base0A #F4BF75
set $base0B #90A959
set $base0C #75B5AA
set $base0D #6A9FB5
set $base0E #AA759F
set $base0F #8F5536

# Base16 colors are as follows;
#base00 - Black     Default Background
#base01 - Gray:     Lighter Background (Used for status bars)
#base02 - Gray:     Selection Background
#base03 - Gray:     Comments, Invisibles, Line Highlighting
#base04 - Grayish:  Dark Foreground (Used for status bars)
#base05 - Grayish:  Default Foreground, Caret, Delimiters, Operators
#base06 - White:    Light Foreground (Not often used)
#base07 - White:    Light Background (Not often used)
#base08 - Red:      Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted
#base09 - Orange:   Integers, Boolean, Constants, XML Attributes, Markup Link Url
#base0A - Yellow:   Classes, Markup Bold, Search Text Background
#base0B - Green:    Strings, Inherited Class, Markup Code, Diff Inserted
#base0C - Cyan:     Support, Regular Expressions, Escape Characters, Markup Quotes
#base0D - Indigo:   Functions, Methods, Attribute IDs, Headings
#base0E - Violet:   Keywords, Storage, Selector, Markup Italic, Diff Changed
#base0F - Brown:    Deprecated, Opening/Closing Embedded Language Tags, e.g.

# Basic bar configuration using the Base16 variables.
bar {
    output primary
    font pango:Iosevka Nerd Font 16px
    status_command /usr/bin/i3blocks -c ~/.config/i3blocks/config

    colors {
        background $transp
        separator  $base03
        statusline $base06

        # State             Border  BG      Text
        focused_workspace   $transp $transp $base0C
        active_workspace    $transp $transp $base0D
        inactive_workspace  $transp $transp $base03
        urgent_workspace    $transp $transp $base09
        binding_mode        $transp $transp $base06
    }
	position top
	mode dock
	modifier None

    i3bar_command i3bar -t
}

# Need this to update i3blocks on song change
exec --no-startup-id "~/.config/i3/i3mpdupdate"

# Basic color configuration using the Base16 variables for windows and borders.
# Property Name         Border  BG      Text    Indicator Child Border
client.focused          $base05 $base0D $base00 $base0D $base0D
client.focused_inactive $base01 $base01 $base05 $base03 $base01
client.unfocused        $base01 $base00 $base05 $base01 $base01
client.urgent           $base08 $base08 $base00 $base08 $base08
client.placeholder      $base00 $base00 $base05 $base00 $base00
client.background       $base07

# Need these for gaps
for_window [class="^.*"] border pixel 0
gaps inner 12
gaps outer 0

#--------------------#
#-----WORKSPACES-----#
#--------------------#

# Desktop 1 is for conky as a system viewer
set $ws1 "1:漣"
assign [class="Conky"]          $ws1
# Desktop 2 is for web browsing
set $ws2 "2:爵"
assign [class="qutebrowser"]    $ws2
# Desktop 3 is for terminal
set $ws3 "3:"
assign [class="Termite"]        $ws3
# Desktop 4 is for matlab
set $ws4 "4:"
assign [class="MATLAB*"]        $ws4
assign [class="GNU Octave"]     $ws4
# Desktop 5 is for reading stuff
set $ws5 "5:"
assign [class="Zathura"]        $ws5
assign [class="ristretto"]      $ws5
assign [class="nemo"]           $ws5
# Desktop 6 is for writing
set $ws6 "6:"
assign [class="libreoffice*"]   $ws6
assign [class="Soffice"]        $ws6
# Desktop 7 is for media viewing
set $ws7 "7:"
assign [class="mpv"]            $ws7
assign [class="smplayer"]       $ws7
assign [class="cantata"]        $ws7
# Desktop 8 is for image manipulation
set $ws8 "9:"
assign [class="pdfsam"]         $ws8
assign [class="gimp"]           $ws8
assign [class="inkscape"]       $ws8
assign [class="Blender"]        $ws8
assign [class="openscad"]       $ws8
# Desktop 9 is for Steam and games
set $ws9 "9:"
assign [class="Steam"]          $ws9
assign [class="Stepmania"]      $ws9
# Desktop 0 is just bleh.
set $ws0 "0:"


#--------------#
#-----KEYS-----#
#--------------#

set $Alt        Mod1
set $Meta       Mod4
set $Resize     ""
set $Gaps       ""
set $Gaps_In    ""
set $Gaps_Out   ""

# Use to frag floating with mod
floating_modifier $Meta
##########################
#  LAUNCHERS & COMMANDS  #
##########################

# Terminal
bindsym $Meta+Return exec "/usr/bin/termite"
# Rofi (launcher)
bindsym $Meta+space exec "/usr/bin/rofi -show drun"
# Daemons
bindsym $Meta+d exec "~/.config/rofi/systemd"
# Password
bindsym $Meta+p exec "ROFI_PASS_CONFIG=~/.config/rofi/rofi-pass.conf /usr/bin/rofi-pass"
# Screenshot
bindsym Print "maim {_,-i $(xdotool getactivewindow)} ~/Pictures/Screenshots/$(date +%Y-%m-%d_%H:%M:%S).png"
bindsym Shift+Print "maim -i $(xdotool getactivewindow) ~/Pictures/Screenshots/$(date +%Y-%m-%d_%H:%M:%S).png"
bindsym $Alt+Print "maim -s ~/Pictures/Screenshots/$(date +%Y-%m-%d_%H:%M:%S).png"
# Wallpaper
bindsym $Meta+Down exec "/usr/bin/systemctl --user start wallpaper@${DISPLAY}.service"
# Lock
bindsym $Meta+Escape exec "/usr/bin/systemctl --user start lock@${DISPLAY}.service"
# reload the configuration file
bindsym $Meta+Shift+Escape reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $Meta+Ctrl+r restart
# exit i3 (logs you out of your X session)
bindsym $Meta+$Alt+Escape exec "i3-nagbar -t warning -m 'Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' '/usr/bin/systemctl --user stop i3@${DISPLAY}.service'"
# Music controls, with signal to 2
bindsym XF86AudioPlay exec "mpc toggle ; pkill -RTMIN+2 i3blocks ;"
bindsym XF86AudioStop exec "mpc stop ; pkill -RTMIN+2 i3blocks ;"
bindsym XF86AudioNext exec "mpc next ; pkill -RTMIN+2 i3blocks ;"
bindsym XF86AudioPrev exec "if [[ $(mpc status | awk '/^\[playing\]/ { sub(/\/.+/,\\"\\",$3); split($3,a,/:/); print a[1]*60+a[2] }') -ge 3 ]]; then mpc seek 0; else mpc prev; fi ; pkill -RTMIN+2 i3blocks ;"
# Sound controls, with signal to 1
bindsym XF86AudioRaiseVolume exec "/usr/bin/pamixer --increase 5 ; pkill -RTMIN+1 i3blocks ;"
bindsym XF86AudioLowerVolume exec "/usr/bin/pamixer --decrease 5 ; pkill -RTMIN+1 i3blocks ;"
bindsym XF86AudioMute        exec "/usr/bin/pamixer --toggle-mute ; pkill -RTMIN+1 i3blocks ;"
# Brightness settings
bindsym XF86MonBrightnessUp   exec "/usr/bin/brightnessctl -d $BRI_SCR s +10 ; pkill -RTMIN+3 i3blocks ;"
bindsym XF86MonBrightnessDown exec "/usr/bin/brightnessctl -d $BRI_SCR s 10- ; pkill -RTMIN+3 i3blocks ;"
bindsym XF86KbdBrightnessUp   exec "/usr/bin/brightnessctl -d $BRI_KBD s +1  ; pkill -RTMIN+3 i3blocks ;"
bindsym XF86KbdBrightnessDown exec "/usr/bin/brightnessctl -d $BRI_KBD s 1-  ; pkill -RTMIN+3 i3blocks ;"
# Compton
bindsym $Meta+c exec "if (systemctl is-active --user --quiet compton@${DISPLAY}.service); then systemctl --user stop compton@${DISPLAY}.service; else systemctl --user start compton@${DISPLAY}.service; fi"
# Redshift
bindsym $Meta+r exec "if (systemctl is-active --user --quiet redshift@${DISPLAY}.service); then systemctl --user stop redshift@${DISPLAY}.service; else systemctl --user start redshift@${DISPLAY}.service; fi"

# Kill window
bindsym $Meta+q kill
# change focus
bindsym $Meta+h focus left
bindsym $Meta+j focus down
bindsym $Meta+k focus up
bindsym $Meta+l focus right
# split in horizontal orientation
bindsym $Meta+comma split h
# split in vertical orientation
bindsym $Meta+perios split v
# Screen modes
bindsym $Meta+m fullscreen
bindsym $Meta+t layout tabbed
bindsym $Meta+f floating toggle
bindsym $Meta+s layout stacking
bindsym $Meta+o layout toggle split
# Change focus between tiling/toggling
bindsym $Meta+Up focus mode_toggle
# Focus parent/child container
bindsym $Meta+a focus parent
bindsym $Meta+b focus child
# Switch to workspace
bindsym $Meta+Right workspace next
bindsym $Meta+Left  workspace prev
bindsym $Meta+1 workspace $ws1
bindsym $Meta+2 workspace $ws2
bindsym $Meta+3 workspace $ws3
bindsym $Meta+4 workspace $ws4
bindsym $Meta+5 workspace $ws5
bindsym $Meta+6 workspace $ws6
bindsym $Meta+7 workspace $ws7
bindsym $Meta+8 workspace $ws8
bindsym $Meta+9 workspace $ws9
bindsym $Meta+0 workspace $ws0
# Move focused to workspace
bindsym $Meta+Shift+Right move container to workspace next
bindsym $Meta+Shift+Left  move container to workspace prev
bindsym $Meta+Shift+1 move container to workspace $ws1
bindsym $Meta+Shift+2 move container to workspace $ws2
bindsym $Meta+Shift+3 move container to workspace $ws3
bindsym $Meta+Shift+4 move container to workspace $ws4
bindsym $Meta+Shift+5 move container to workspace $ws5
bindsym $Meta+Shift+6 move container to workspace $ws6
bindsym $Meta+Shift+7 move container to workspace $ws7
bindsym $Meta+Shift+8 move container to workspace $ws8
bindsym $Meta+Shift+9 move container to workspace $ws9
bindsym $Meta+Shift+0 move container to workspace $ws0
# Resizing
bindsym $Meta+w mode $Resize
mode $Resize {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym $left       resize shrink width 10 px or 10 ppt
        bindsym $down       resize grow height 10 px or 10 ppt
        bindsym $up         resize shrink height 10 px or 10 ppt
        bindsym $right      resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left        resize shrink width 10 px or 10 ppt
        bindsym Down        resize grow height 10 px or 10 ppt
        bindsym Up          resize shrink height 10 px or 10 ppt
        bindsym Right       resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}
bindsym $Meta+g mode $Gaps
mode $Gaps {
        bindsym o      mode $Gaps_Out
        bindsym i      mode $Gaps_In
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym 0      gaps inner current set 0 ; gaps outer current set 0 
        bindsym Shift+0 gaps inner all set 0 ; gaps all current set 0 
}

mode $Gaps_In {
        bindsym plus  gaps inner current plus 5
        bindsym minus gaps inner current minus 5
        bindsym 0     gaps inner current set 0

        bindsym Shift+plus  gaps inner all plus 5
        bindsym Shift+minus gaps inner all minus 5
        bindsym Shift+0     gaps inner all set 0

        bindsym Return mode "default"
        bindsym Escape mode "default"
}
mode $Gaps_Out {
        bindsym plus  gaps outer current plus 5
        bindsym minus gaps outer current minus 5
        bindsym 0     gaps outer current set 0

        bindsym Shift+plus  gaps outer all plus 5
        bindsym Shift+minus gaps outer all minus 5
        bindsym Shift+0     gaps outer all set 0

        bindsym Return mode "default"
        bindsym Escape mode "default"
}

# vim:filetype=i3
