#!/bin/env python
"""
Formatting wrapper around system monitoring daemons
"""

import json
import os
import re
import sys
import subprocess
import threading

# Status bar colors: base16-default-dark
COLOR = {
    'base00': '181818',
    'base01': '282828',
    'base02': '383838',
    'base03': '585858',
    'base04': 'b8b8b8',
    'base05': 'd8d8d8',
    'base06': 'e8e8e8',
    'base07': 'f8f8f8',
    'base08': 'ab4642',
    'base09': 'dc9656',
    'base0A': 'f7ca88',
    'base0B': 'a1b56c',
    'base0C': '86c1b9',
    'base0D': '7cafc2',
    'base0E': 'ba8baf',
    'base0F': 'a16946'
}

class Memoize:
    """ Decorator to memoize function calls """
    def __init__(self, fn):
        self.fun = fn
        self.memo = {}

    def __call__(self, *args):
        if args not in self.memo:
            self.memo[args] = self.fun(*args)
        return self.memo[args]

@Memoize
def get_color(inp):
    """ Function to return a color string """
    # Define the colors as given by base16, and by their names
    named = {
        'background': COLOR['base01'],
        'bkg': COLOR['base01'],
        'muted': COLOR['base03'],
        'mute': COLOR['base03'],
        'foreground': COLOR['base04'],
        'frg': COLOR['base04'],
        'red': COLOR['base08'],
        'crimson': COLOR['base08'],
        'ora': COLOR['base09'],
        'orange': COLOR['base09'],
        'yel': COLOR['base0A'],
        'yellow': COLOR['base0A'],
        'gre': COLOR['base0B'],
        'green': COLOR['base0B'],
        'cya': COLOR['base0C'],
        'cyan': COLOR['base0C'],
        'ind': COLOR['base0D'],
        'blue': COLOR['base0D'],
        'indigo': COLOR['base0D'],
        'vio': COLOR['base0E'],
        'pink': COLOR['base0E'],
        'violet': COLOR['base0E'],
        'purple': COLOR['base0E'],
        'bro': COLOR['base0F'],
        'brown': COLOR['base0F']}
    colors = {**COLOR, **named}
    # Do answer checking
    if re.search(r'^(?:[0-9a-fA-F]{3}){1,2}$', inp):
        return inp
    if inp in colors:
        return colors[inp]
    if re.search(r'^#(?:[0-9a-fA-F]{3}){1,2}$', inp):
        return inp
    print('Invalid color selection, defaulting to red')
    return colors['red']

def exec_cmd(cmd):
    """ Function calls arbitrary shell command. """
    subprocess.call(['/bin/dash', '-c', cmd],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL)

def i3_listen(stdin, form):
    """ Respond to stdin """
    for line in stdin:
        try:
            x = json.loads(line)['button']
            if x == 1:
                exec_cmd(form['on-click'])
            elif x == 2:
                exec_cmd(form['on-click-right'])
            elif x == 3:
                exec_cmd(form['on-click-middle'])
            elif x == 4:
                exec_cmd(form['on-scroll-up'])
            elif x == 5:
                exec_cmd(form['on-scroll-down'])
        except:
            pass

if __name__ == '__main__':
    # Get method name
    METHOD = os.environ['name']
    # Get accent color
    ACCENT = get_color(os.environ['accent'])

    # Create formatting string
    TEXT = "<span color='#{accent}'>{prefix}</span>"
    TEXT += "{format}<span color='#{accent}'>{suffix}</span>"

    # Initialize the formatting dict
    FORM = {'format': '',
            'prefix': '',
            'suffix': '',
            'accent': ACCENT,
            'color': get_color('frg'),
            'on-click' : 'true',
            'on-click-right' : 'true',
            'on-click-middle' : 'true',
            'on-scroll-up' : 'true',
            'on-scroll-down' : 'true',
            'mute': False}

    # Initialize the output dict
    OUT = {'full_text': '',
           'color': get_color('frg'),
           'urgent': False}

    # Start the daemon
    DAEMON = subprocess.Popen(sys.path[0] + '/' + METHOD,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.DEVNULL)

    FLAG = False
    while True:
        # Read all lines as json until termination
        LINE = DAEMON.stdout.readline()
        # Exit if terminated
        if not LINE:
            break
        # Read input
        NEW = json.loads(LINE.decode('utf-8'))
        # Load onto the formatting dict
        FORM = {**FORM, **NEW}
        # If the first time this loop is running, start the listener daemon
        if not FLAG:
            FLAG = False
            LISTEN = threading.Thread(target=i3_listen,
                                      args=(sys.stdin, FORM),
                                      daemon=True)
            LISTEN.start()
        # If both the prefix and format are empty, skip
        if FORM['prefix'] == '' and FORM['suffix'] == '' and FORM['format'] == '':
            print('{}')
            sys.stdout.flush()
            continue
        # Overwrite color depending on muting
        if FORM['mute']:
            OUT['color'] = get_color('mute')
        else:
            OUT['color'] = get_color('frg')
        # Get urgency
        if 'urgent' in FORM:
            OUT['urgent'] = FORM['urgent']
        else:
            OUT['urgent'] = False
        # Redo accent color
        FORM['accent'] = get_color(FORM['accent'])
        # Get formatted text
        OUT['full_text'] = TEXT.format_map(FORM)
        # Print string
        print(json.dumps(OUT, ensure_ascii=False))
        # Flush stdout
        sys.stdout.flush()
