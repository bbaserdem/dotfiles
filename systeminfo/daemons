#!/bin/sh

#############################################################################
# _______   __       _______..______    __          ___   ____    ____      #
#|       \ |  |     /       ||   _  \  |  |        /   \  \   \  /   /      #
#|  .--.  ||  |    |   (----`|  |_)  | |  |       /  ^  \  \   \/   /       #
#|  |  |  ||  |     \   \    |   ___/  |  |      /  /_\  \  \_    _/        #
#|  '--'  ||  | .----)   |   |  |      |  `----./  _____  \   |  |          #
#|_______/ |__| |_______/    | _|      |_______/__/     \__\  |__|          #
#                                                                           #
#     _______.  ______ .______       __  .______   .___________.    _______.#
#    /       | /      ||   _  \     |  | |   _  \  |           |   /       |#
#   |   (----`|  ,----'|  |_)  |    |  | |  |_)  | `---|  |----`  |   (----`#
#    \   \    |  |     |      /     |  | |   ___/      |  |        \   \    #
#.----)   |   |  `----.|  |\  \----.|  | |  |          |  |    .----)   |   #
#|_______/     \______|| _| `._____||__| | _|          |__|    |_______/    #
#############################################################################

module_selection () {
    case $1 in
        audio) pa ;;
        brightness) brightness ;;
        calendar) calendar ;;
        cpu) cpu ;;
        day) day ;;
        disk) disk ;;
        keyboard) keyboard ;;
        power) battery ;;
        time) clock ;;
        *) echo "Missing module ${_module}"; exit 3 ;;
    esac
}

##########################################
#  __  __           _       _            #
# |  \/  | ___   __| |_   _| | ___  ___  #
# | |\/| |/ _ \ / _` | | | | |/ _ \/ __| #
# | |  | | (_) | (_| | |_| | |  __/\__ \ #
# |_|  |_|\___/ \__,_|\__,_|_|\___||___/ #
#                                        #
##########################################

# Pulseaudio daemon
pa () {
    # Fix this to use only pacmd and pactl
    _left='/usr/bin/pactl set-sink-mute @DEFAULT_SINK@ toggle'
    _right="/usr/bin/pavucontrol & disown"
    _up='/usr/bin/pactl set-sink-volume @DEFAULT_SINK@ +5%'
    _down='/usr/bin/pactl set-sink-volume @DEFAULT_SINK@ -5%'

    get_text() {
        _sink="$(pactl info | sed -n 's|Default Sink: \(.*\)|\1|p')"
        _line="$(pactl list sinks short | grep -n "${_sink}" | cut -d : -f 1)"
        _defn="$(pactl list sinks | sed -n 's|^\sActive Port: \([^\s]*\)|\1|p' | sed -n "${_line}p")"
        _ismt="$(pactl list sinks | sed -n 's|^\sMute: \([^\s]*\)|\1|p' | sed -n "${_line}p")"
        _volm="$(pactl list sinks | sed -n 's|^\sVolume: \(.*\)$|\1|p' | sed -n "${_line}p" | awk '
            BEGIN{ RS=" "; vol=0; n=0; }
            /[0-9]+%$/ { n++; vol+=$1; }
            END{ if(n>0) { printf( "%.0f", vol/n ); } }' )"

        case "$_defn" in
            *hdmi*)                     _icon="﴿" ;;
            *headset*|*a2dp*|*hifi*)    _icon="" ;;
            *headphones*)               _icon="" ;;
            *speaker*)                  _icon="蓼" ;;
            *network*)                  _icon="爵" ;;
            *analog*)                   _icon="" ;;
            *)                          _icon="" ;;
        esac

        if echo $_sink | grep -q 'bluez' ; then
            _icon=""
        fi

        [[ $_ismt = 'yes' ]] && _ismt='true' || _ismt='false'

        _js="{ "
        _js="${_js}  \"output\":\"${_volm}\""
        _js="${_js}, \"prefix\":\"${_icon} \""
        _js="${_js}, \"mute\":${_ismt}"
        _js="${_js}, \"on-click-left\":\"${_left}\""
        _js="${_js}, \"on-click-right\":\"${_right}\""
        _js="${_js}, \"on-scroll-up\":\"${_up}\""
        _js="${_js}, \"on-scroll-down\":\"${_down}\""
        _js="${_js} }"

        echo $_js
    }

    get_text
    /usr/bin/pactl subscribe | while read -r line ; do
        echo $line | grep -q -e "sink" -e "'change' on server #" && get_text
    done

}

# Display battery status
battery () {
    _cap="/sys/class/power_supply/BAT0/capacity"
    _stt="/sys/class/power_supply/BAT0/status"
    _onl="/sys/class/power_supply/AC0/online"
    
    get_text() {
        if [ -e "${_cap}" ] ; then 
            _num="$(cat ${_cap})"
            _sta="$(cat ${_stt})"
            _acp="$(cat ${_onl})"

            if   [ "$_num" -ge 80 ] ; then # Green ()
                _ico=""
            elif [ "$_num" -ge 60 ] ; then
                # Yellow (0A)
                _ico=""
            elif [ "$_num" -ge 40 ] ; then
                # Orange (09)
                _ico=""
            elif [ "$_num" -ge 20 ] ; then
                # Red (08)
                _ico=""
            else
                # White (03)
                _ico=""
            fi

            if [ "$_sta" = "Charging" ] ; then
                _ico=${_ico:1:2}
            elif [ "$_acp" = "1" ] ; then
                _ico=""
            else
                _ico=${_ico:0:1}
            fi
        
            echo "{\"output\":\"${_num}\", \"prefix\":\"${_ico} \" }"

        else
            echo "{}"
        fi
        }

    get_text
    /usr/bin/acpi_listen | while read -r line ; do
        echo $line | grep -q -e 'battery' && get_text
    done

}

brightness () {
    _dev="$(light -L | grep 'auto' | head -n 1 | awk '{$1=$1};1')"
    _down="/usr/bin/light -Us ${_dev} 5 > /dev/null 2>&1"
    _up="/usr/bin/light -As ${_dev} 5 > /dev/null 2>&1"

    get_text () {
        _val="$(light -Gs "${_dev}" | sed 's|^\(.*\)\..*|\1|')" || exit 1
        if   [ "$_val" -ge 75 ] ; then
            _ico=""
        elif [ "$_val" -ge 50 ] ; then
            _ico=""
        else
            _ico=""
        fi
        _js="{ \"output\":\"${_val}\", \"prefix\":\"${_ico} \""
        echo "${_js},\"on-scroll-up\":\"${_up}\",\"on-scroll-down\":\"${_down}\"}"
    }
    
    get_text
    /usr/bin/acpi_listen | while read -r line ; do
        echo $line | grep -q -e 'brightness' && get_text
    done
    
}

calendar () {
    _file="${HOME}/Documents/Calendar"
    _ico=""
    _len=52

    get_text () {
        _txt="$(khal list | head -n 1)"
        [ "${_txt}" = "No events" ]  && _mute='true' || _mute='false'
        [ "${#_txt}" -gt "${_len}" ] && _txt="${_txt:0:${_len}}…"
        echo "{ \"output\":\"${_txt}\", \"mute\":${_mute}, \"prefix\":\"${_ico} \" }"
    }

    while : ; do
        get_text
        sleep 5
        inotifywait --recursive --timeout -1 "${_file}" > /dev/null 2>&1 || break
    done
}

day () {
    get_icon () {
        case "$1" in
            0)  _out="" ;; 1)  _out="" ;; 2)  _out="" ;; 3)  _out="" ;;
            4)  _out="" ;; 5)  _out="" ;; 6)  _out="" ;; 7)  _out="" ;;
            8)  _out="" ;; 9)  _out="" ;; 10) _out="" ;; 11) _out="" ;;
            12) _out="" ;; 13) _out="" ;; 14) _out="" ;; 15) _out="" ;;
            16) _out="" ;; 18) _out="" ;; 19) _out="" ;; 20) _out="" ;;
            21) _out="" ;; 22) _out="" ;; 23) _out="" ;; 24) _out="" ;;
            25) _out="" ;; 26) _out="" ;; 27) _out="" ;; 28) _out="" ;;
            29) _out="" ;; 30) _out="" ;;
        esac
        echo "${_out:0:1}"
    }

    get_text () {
        _moon="$(echo "$(printf "%.0f" "$(echo "scale=2; ( $(date -d "00:00" +%s) - $(date -d "1999-08-11" +%s) )/(60*60*24)" | bc)") % 29.530588853" | bc | awk '{printf("%d",$1+.5)}')"
        echo "{ \"output\":\"$(date '+%a %d, %b %Y')\", \"prefix\":\"$(get_icon $_moon) \" }"
    }

    while : ; do
        get_text
        sleep "$(( $(date -d "tomorrow 0" +%s) - $(date +%s) + 5 ))"
    done

}

cpu () {
    _ico=""
    _cpu1="$(grep 'cpu ' /proc/stat)"

    while : ; do
        sleep 1
        _cpu2="$(grep 'cpu ' /proc/stat)"
        _per="$( echo "${_cpu1} ${_cpu2}" | awk '{ printf( "%.2f", ($13-$2+$15-$4)*100/($13-$2+$15-$4+$16-$5)) }' )"
        _cpu1="${_cpu2}"
        echo "{ \"output\":\"${_per}\", \"prefix\":\"${_ico} \" }"
    done
}

clock () {
    _ico=""

    while : ; do
        _txt="$(date '+%H:%M:%S')"
        echo "{ \"output\":\"$(date '+%H:%M:%S')\", \"prefix\":\"${_ico} \" }"
        sleep 1
    done
}

disk () {
    _icr=""
    _ich=""

    get_text () {
        _rfs="$(df -hPl /      | tail -1 | awk '{ printf $3 "/" $2 " (" $5 ")" }' )"
        _hfs="$(df -hPl /home/ | tail -1 | awk '{ printf $3 "/" $2 " (" $5 ")" }' )"
        echo "{ \"output\":\"${_rfs} | ${_hfs}\", \"prefix\":\"${_icr} \", \"suffix\":\" ${_ich}\" }"
    }

    while : ; do
        get_text
        sleep 60
    done

    get_loop
    
}

internet () {
    _eint='ethernet'
    _eico=""
    _wint='wifi'
    _wico=""
    _uint='usbtether'
    _uico=""
    _bint="broadcast"
    _bico=""
    _ovpn=""
    _ocnc="ﮂ"

    _esta="/sys/class/net/${_eint}/operstate"
    _wsta="/sys/class/net/${_wint}/operstate"
    _usta="/sys/class/net/${_uint}/operstate"
    _bsta="/sys/class/net/${_bint}/operstate"

    get_text() {
        _txt=""
        [ -f ${_esta} ] && _econ="$(cat "${_esta}")"
        [ -f ${_wsta} ] && _wcon="$(cat "${_wsta}")"
        [ -f ${_usta} ] && _ucon="$(cat "${_usta}")"
        [ -f ${_bsta} ] && _bcon="$(cat "${_bsta}")"
        [[ ${_econ} == 'up' ]] && _txt="${_txt}${_eico} "
        [[ ${_wcon} == 'up' ]] && _txt="${_txt}${_wico} "
        [[ ${_ucon} == 'up' ]] && _txt="${_txt}${_uico} "
        [[ ${_bcon} == 'up' ]] && _txt="${_txt}${_bico} "
        pgrep openvpn     >/dev/null && _txt="${_txt}${_ovpn} "
        pgrep openconnect >/dev/null && _txt="${_txt}${_ocnc} "
        _txt="${_txt::-1}"

        case $_format in
            pango|i3|i3blocks|sway)
                json_output "<span color='${_col}'>${_txt}</span>" ;;
            lemonbar|polybar|bspwm)
                echo "%{u${_col}}%{+u}%{F${_col}}${_txt}%{F-}%{-u}%{u-}" ;;
        esac
    }
    
    get_loop () {
        while : ; do
            get_text
            sleep 5
        done
    }

    get_loop

}


keyboard () {
    _dev="$(light -L | grep 'kbd' | head -n 1 | awk '{$1=$1};1')"
    _left="/usr/bin/xkb-switch -n >/dev/null 2>&1"
    _down="/usr/bin/light -Urs ${_dev} 5 >/dev/null 2>&1"
    _up="/usr/bin/light -Ars ${_dev} 1 >/dev/null 2>&1"

    get_text () {
        # Get backlight levels
        _bri="$(light -Gs "${_dev}" | sed 's|^\(.*\)\..*|\1|')"
        echo $_bri
        if   [ "$_bri" -gt 75 ] ; then
            _suf=" "
        elif [ "$_bri" -gt 50 ] ; then
            _suf=" "
        elif [ "$_bri" -gt 25 ] ; then
            _suf=" "
        else
            _suf=""
        fi
        # Get keymap
        _ico=""
        _sta="$(xkb-switch -p)"
        _lan="$(echo "${_sta}" | sed 's|\(.*\)(.*)|\1|' | awk '{print toupper($0)}')"
        _lay="$(echo "${_sta}" | grep '(' | sed 's|.*(\(.*\))|\1|')"
        [ -z "${_lay}" ] && _lay="qwe" || _lay="${_lay:0:3}"

        _js="{ "
        _js="${_js}  \"output\":\"${_lan}(${_lay})\""
        _js="${_js}, \"prefix\":\"${_ico} \""
        _js="${_js}, \"suffix\":\"${_suf}\""
        _js="${_js}, \"on-click-left\":\"${_left}\""
        _js="${_js}, \"on-scroll-up\":\"${_up}\""
        _js="${_js}, \"on-scroll-down\":\"${_down}\""
        _js="${_js} }"
        echo "${_js}"
    }

    blight () {
        /usr/bin/acpi_listen | while read -r line ; do
            echo $line | grep -q -e 'kbd' && get_text
        done
    }

    keymaps () {
        /usr/bin/xkb-switch -W | while read -r line ; do
            get_text
        done
    }

    blight & keymaps
    
}



module_selection $1
