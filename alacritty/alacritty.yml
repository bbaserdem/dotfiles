# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Base16 Eighties 256 - alacritty color config
# Chris Kempson (http://chriskempson.com)
colors:
  # Default colors
  primary:
    background: '0x2d2d2d'
    foreground: '0xd3d0c8'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0x2d2d2d'
    cursor: '0xd3d0c8'

  # Normal colors
  normal:
    black:   '0x2d2d2d'
    red:     '0xf2777a'
    green:   '0x99cc99'
    yellow:  '0xffcc66'
    blue:    '0x6699cc'
    magenta: '0xcc99cc'
    cyan:    '0x66cccc'
    white:   '0xd3d0c8'

  # Bright colors
  bright:
    black:   '0x747369'
    red:     '0xf2777a'
    green:   '0x99cc99'
    yellow:  '0xffcc66'
    blue:    '0x6699cc'
    magenta: '0xcc99cc'
    cyan:    '0x66cccc'
    white:   '0xf2f0ec'

  indexed_colors:
    - { index: 16, color: '0xf99157' }
    - { index: 17, color: '0xd27b53' }
    - { index: 18, color: '0x393939' }
    - { index: 19, color: '0x515151' }
    - { index: 20, color: '0xa09f93' }
    - { index: 21, color: '0xe8e6df' }

env:
  WINIT_HIDPI_FACTOR: '1'
  # TERM variable
  # TERM: xterm-256color

background_opacity: .9

window:
  dimensions:
    columns: 0
    lines: 0
  padding:
    x: 2
    y: 2
  dynamic_padding: false
  decorations: none
  startup_mode: Windowed

scrolling:
  history: 10000
  multiplier: 3
  faux_multiplier: 3
  auto_scroll: false

tabspaces: 8

font:
  normal:
    family: monospace
    style: Regular
  bold:
    family: monospace
    style: Bold
  italic:
    family: monospace
    style: Italic
  size: 11.0
  offset:
    x: 0
    y: 0
  glyph_offset:
    x: 0
    y: 0

debug:
    render_timer: false
    persistent_logging: false

draw_bold_text_with_bright_colors: true

visual_bell:
  animation: EaseOutExpo
  duration: 0
  color: '0xffffff'

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: false
  url:
    launcher:
      program: xdg-open
      args:
        - --new-window

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"
  save_to_clipboard: false

dynamic_title: true

cursor:
  style: Block
  unfocused_hollow: true

live_config_reload: true

#shell:
#    program: /usr/bin/tmux
#  args:
#    - --login

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

key_bindings:
# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - None
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad

  # (Windows/Linux only)
  #- { key: V,        mods: Control|Shift, action: Paste            }
  #- { key: C,        mods: Control|Shift, action: Copy             }
  #- { key: Insert,   mods: Shift,         action: PasteSelection   }
  #- { key: Key0,     mods: Control,       action: ResetFontSize    }
  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
  #-----TMUX integration-----#
    # Regular commands
  # Command prompt
  - { key: Grave,    mods: Alt|Shift,   chars: "\x02\x3a" } # :: 3a
  # Help menu
  - { key: Slash,    mods: Alt|Shift,   chars: "\x02\x3f" } # ?: 3f
  # Copy mode
  - { key: C,        mods: Alt|Shift,   chars: "\x02\x5b" } # [: 5b
  # Paste mode
  - { key: V,        mods: Alt|Shift,   chars: "\x02\x5d" } # ]: 5d
  # Start search
  - { key: Slash,    mods: Alt,         chars: "\x02\x66" } # f: 66
  # Show time
  - { key: Equals,   mods: Alt,         chars: "\x02\x74" } # t: 74
  # Show messages
  - { key: Grave,    mods: Alt,         chars: "\x02\x3a" } # ~: 7.

    # Pane manipulation
  # Create/delete panes
  - { key: Backslash,mods: Alt,         chars: "\x02\x25" } # %: 25
  - { key: Minus,    mods: Alt,         chars: "\x02\x22" } # ": 22
  - { key: D,        mods: Alt,         chars: "\x02\x78" } # x: 78
  # Navigate panes
  - { key: H,        mods: Alt,         chars: "\x02\x1b\x4f\x44" } # Left:  1b4f44
  - { key: L,        mods: Alt,         chars: "\x02\x1b\x4f\x43" } # Right: 1b4f43
  - { key: J,        mods: Alt,         chars: "\x02\x1b\x4f\x42" } # Down:  1b4f42
  - { key: K,        mods: Alt,         chars: "\x02\x1b\x4f\x41" } # Up:    1b4f41
  # Resize panes
  - { key: H,        mods: Alt|Control, chars: "\x02\x1b\x5b\x31\x3b\x35\x44" } # C-Left:  1b5b313b3544
  - { key: L,        mods: Alt|Control, chars: "\x02\x1b\x5b\x31\x3b\x35\x43" } # C-Right: 1b5b313b3543
  - { key: J,        mods: Alt|Control, chars: "\x02\x1b\x5b\x31\x3b\x35\x42" } # C-Down:  1b5b313b3542
  - { key: K,        mods: Alt|Control, chars: "\x02\x1b\x5b\x31\x3b\x35\x41" } # C-Up:    1b5b313b3541
  # Select Next pane
  - { key: Right,    mods: Alt,         chars: "\x02\x6f" } # o: 6f
  # Move to previously active pane
  - { key: Up,       mods: Alt,         chars: "\x02\x3b" } # ;: 3b
  # Rotate panes?
  - { key: Period,   mods: Alt,         chars: "\x02\x0f" } # Ctrl+o: 0f
  # Break pane out of window
  - { key: T,        mods: Alt,         chars: "\x02\x21" } # !: 21
  # Get pane info
  - { key: I,        mods: Alt,         chars: "\x02\x71" } # q: 71
  # Mark pane for selection & unmark
  - { key: M,        mods: Alt,         chars: "\x02\x6d" } # m: 6d
  - { key: M,        mods: Alt|Shift,   chars: "\x02\x4d" } # M: 4d
  # Toggle zoom
  - { key: Equals,   mods: Alt|Shift,   chars: "\x02\x7a" } # z: 7a
  # Swap panes
  - { key: Right,    mods: Alt|Shift,   chars: "\x02\x7b" } # {: 7b
  - { key: Left,     mods: Alt|Shift,   chars: "\x02\x7d" } # }: 7d
  # Arrange is preset layout
  - { key: Space,    mods: Alt,         chars: "\x02\x7d" } #  : 20

    # Window manipulation
  # Get window info
  - { key: I,        mods: Alt|Shift,   chars: "\x02\x69" } # i: 69
  # Rename window
  - { key: R,        mods: Alt,         chars: "\x02\x2c" } # ,: 2c
  # Create/delete windows
  - { key: O,        mods: Alt,         chars: "\x02\x63" } # c: 63
  - { key: D,        mods: Alt,         chars: "\x02\x26" } # &: 26
  # Navigate window by id
  - { key: G,        mods: Alt,         chars: "\x02\x27" } # ': 27
  # Move window to id
  - { key: G,        mods: Alt|Shift,   chars: "\x02\x2e" } # .: 2e
  # Go to window id; 0-9 : 30-39
  - { key: Key0,     mods: Alt,         chars: "\x02\x30" }
  - { key: Key1,     mods: Alt,         chars: "\x02\x31" }
  - { key: Key2,     mods: Alt,         chars: "\x02\x32" }
  - { key: Key3,     mods: Alt,         chars: "\x02\x33" }
  - { key: Key4,     mods: Alt,         chars: "\x02\x34" }
  - { key: Key5,     mods: Alt,         chars: "\x02\x35" }
  - { key: Key6,     mods: Alt,         chars: "\x02\x36" }
  - { key: Key7,     mods: Alt,         chars: "\x02\x37" }
  - { key: Key8,     mods: Alt,         chars: "\x02\x38" }
  - { key: Key9,     mods: Alt,         chars: "\x02\x39" }
  # Move to prev/next window
  - { key: Tab,      mods: Alt,         chars: "\x02\x70" } # p: 70
  - { key: Tab,      mods: Alt|Shift,   chars: "\x02\x6e" } # n: 6e
  # Move to previously selected window
  - { key: Tab,      mods: Alt|Control, chars: "\x02\x6c" } # l: 6c
  # Pick window iteratively
  - { key: C,        mods: Alt,         chars: "\x02\x77" } # w: 77


    # Session manipulation
  # Rename session
  - { key: N,        mods: Alt,         chars: "\x02\x24" } # $: 24
  # Navigate sessions
  - { key: LBracket, mods: Alt,         chars: "\x02\x28" } # (: 28
  - { key: RBracket, mods: Alt,         chars: "\x02\x29" } # ): 29

    # Client commands
  # Redraw client
  - { key: R,        mods: Alt|Shift,   chars: "\x02\x72" } # r: 72
  # Detach client
  - { key: Q,        mods: Alt,         chars: "\x02\x64" } # d: 64
  # Choose client to detach
  - { key: Q,        mods: Alt|Shift,   chars: "\x02\x44" } # D: 44
  # Select client to attach
  - { key: S,        mods: Alt,         chars: "\x02\x73" } # s: 73
  # Send attached client to last session
  - { key: S,        mods: Alt|Shift,   chars: "\x02\x4c" } # L: 4c
  # Choose buffer to paste
  - { key: C,        mods: Alt,         chars: "\x02\x3d" } # =: 3d
  # List all paste buffers
  - { key: V,        mods: Alt,         chars: "\x02\x23" } # #: 23
  # Delete the recent copied buffer of text
  - { key: X,        mods: Alt,         chars: "\x02\x2d" } # -: 2d

  - { key: Paste,                   action: Paste                            }
  - { key: Copy,                    action: Copy                             }
  - { key: L,        mods: Control, action: ClearLogNotice                   }
  - { key: L,        mods: Control, chars: "\x0c"                            }
  - { key: Home,                    chars: "\x1bOH",        mode: AppCursor  }
  - { key: Home,                    chars: "\x1b[H",        mode: ~AppCursor }
  - { key: End,                     chars: "\x1bOF",        mode: AppCursor  }
  - { key: End,                     chars: "\x1b[F",        mode: ~AppCursor }
  - { key: PageUp,   mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~",     mode: Alt        }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                       }
  - { key: PageUp,                  chars: "\x1b[5~"                         }
  - { key: PageDown, mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~",     mode: Alt        }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                       }
  - { key: PageDown,                chars: "\x1b[6~"                         }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                          }
  - { key: Back,                    chars: "\x7f"                            }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                        }
  - { key: Insert,                  chars: "\x1b[2~"                         }
  - { key: Delete,                  chars: "\x1b[3~"                         }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                       }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                       }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                       }
  - { key: Left,                    chars: "\x1b[D",        mode: ~AppCursor }
  - { key: Left,                    chars: "\x1bOD",        mode: AppCursor  }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                       }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                       }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                       }
  - { key: Right,                   chars: "\x1b[C",        mode: ~AppCursor }
  - { key: Right,                   chars: "\x1bOC",        mode: AppCursor  }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                       }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                       }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                       }
  - { key: Up,                      chars: "\x1b[A",        mode: ~AppCursor }
  - { key: Up,                      chars: "\x1bOA",        mode: AppCursor  }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                       }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                       }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                       }
  - { key: Down,                    chars: "\x1b[B",        mode: ~AppCursor }
  - { key: Down,                    chars: "\x1bOB",        mode: AppCursor  }
  - { key: F1,                      chars: "\x1bOP"                          }
  - { key: F2,                      chars: "\x1bOQ"                          }
  - { key: F3,                      chars: "\x1bOR"                          }
  - { key: F4,                      chars: "\x1bOS"                          }
  - { key: F5,                      chars: "\x1b[15~"                        }
  - { key: F6,                      chars: "\x1b[17~"                        }
  - { key: F7,                      chars: "\x1b[18~"                        }
  - { key: F8,                      chars: "\x1b[19~"                        }
  - { key: F9,                      chars: "\x1b[20~"                        }
  - { key: F10,                     chars: "\x1b[21~"                        }
  - { key: F11,                     chars: "\x1b[23~"                        }
  - { key: F12,                     chars: "\x1b[24~"                        }
  - { key: F1,       mods: Shift,   chars: "\x1b[1;2P"                       }
  - { key: F2,       mods: Shift,   chars: "\x1b[1;2Q"                       }
  - { key: F3,       mods: Shift,   chars: "\x1b[1;2R"                       }
  - { key: F4,       mods: Shift,   chars: "\x1b[1;2S"                       }
  - { key: F5,       mods: Shift,   chars: "\x1b[15;2~"                      }
  - { key: F6,       mods: Shift,   chars: "\x1b[17;2~"                      }
  - { key: F7,       mods: Shift,   chars: "\x1b[18;2~"                      }
  - { key: F8,       mods: Shift,   chars: "\x1b[19;2~"                      }
  - { key: F9,       mods: Shift,   chars: "\x1b[20;2~"                      }
  - { key: F10,      mods: Shift,   chars: "\x1b[21;2~"                      }
  - { key: F11,      mods: Shift,   chars: "\x1b[23;2~"                      }
  - { key: F12,      mods: Shift,   chars: "\x1b[24;2~"                      }
  - { key: F1,       mods: Control, chars: "\x1b[1;5P"                       }
  - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                       }
  - { key: F3,       mods: Control, chars: "\x1b[1;5R"                       }
  - { key: F4,       mods: Control, chars: "\x1b[1;5S"                       }
  - { key: F5,       mods: Control, chars: "\x1b[15;5~"                      }
  - { key: F6,       mods: Control, chars: "\x1b[17;5~"                      }
  - { key: F7,       mods: Control, chars: "\x1b[18;5~"                      }
  - { key: F8,       mods: Control, chars: "\x1b[19;5~"                      }
  - { key: F9,       mods: Control, chars: "\x1b[20;5~"                      }
  - { key: F10,      mods: Control, chars: "\x1b[21;5~"                      }
  - { key: F11,      mods: Control, chars: "\x1b[23;5~"                      }
  - { key: F12,      mods: Control, chars: "\x1b[24;5~"                      }
  - { key: F1,       mods: Alt,     chars: "\x1b[1;6P"                       }
  - { key: F2,       mods: Alt,     chars: "\x1b[1;6Q"                       }
  - { key: F3,       mods: Alt,     chars: "\x1b[1;6R"                       }
  - { key: F4,       mods: Alt,     chars: "\x1b[1;6S"                       }
  - { key: F5,       mods: Alt,     chars: "\x1b[15;6~"                      }
  - { key: F6,       mods: Alt,     chars: "\x1b[17;6~"                      }
  - { key: F7,       mods: Alt,     chars: "\x1b[18;6~"                      }
  - { key: F8,       mods: Alt,     chars: "\x1b[19;6~"                      }
  - { key: F9,       mods: Alt,     chars: "\x1b[20;6~"                      }
  - { key: F10,      mods: Alt,     chars: "\x1b[21;6~"                      }
  - { key: F11,      mods: Alt,     chars: "\x1b[23;6~"                      }
  - { key: F12,      mods: Alt,     chars: "\x1b[24;6~"                      }
  - { key: F1,       mods: Super,   chars: "\x1b[1;3P"                       }
  - { key: F2,       mods: Super,   chars: "\x1b[1;3Q"                       }
  - { key: F3,       mods: Super,   chars: "\x1b[1;3R"                       }
  - { key: F4,       mods: Super,   chars: "\x1b[1;3S"                       }
  - { key: F5,       mods: Super,   chars: "\x1b[15;3~"                      }
  - { key: F6,       mods: Super,   chars: "\x1b[17;3~"                      }
  - { key: F7,       mods: Super,   chars: "\x1b[18;3~"                      }
  - { key: F8,       mods: Super,   chars: "\x1b[19;3~"                      }
  - { key: F9,       mods: Super,   chars: "\x1b[20;3~"                      }
  - { key: F10,      mods: Super,   chars: "\x1b[21;3~"                      }
  - { key: F11,      mods: Super,   chars: "\x1b[23;3~"                      }
  - { key: F12,      mods: Super,   chars: "\x1b[24;3~"                      }
  - { key: NumpadEnter,             chars: "\n"                              }
